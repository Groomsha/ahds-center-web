"""–û—Å–Ω–æ–≤–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞."""

import asyncio
import logging
from typing import Optional

# Built-in imports

# Third-party imports
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

# Project imports
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import bot_config
from utils import setup_logging, send_test_message


class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞."""

    def __init__(self) -> None:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–æ—Ç–∞."""
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self._running = False

    def setup(self) -> None:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä."""
        if not bot_config.validate():
            raise ValueError("Invalid bot configuration")

        from aiogram.client.default import DefaultBotProperties
        self.bot = Bot(
            token=bot_config.bot_token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )

        self.dp = Dispatcher()

        # Register basic handlers
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_help, Command("help"))

        # Setup logging
        setup_logging()

    async def cmd_start(self, message: Message) -> None:
        """–û–±—Ä–æ–±–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start."""
        await message.reply(
            "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–∏."
        )

    async def cmd_help(self, message: Message) -> None:
        """–û–±—Ä–æ–±–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É /help."""
        await message.reply(
            "üÜò –î–æ–ø–æ–º–æ–≥–∞\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/start - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏\n"
            "/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞"
        )

    async def send_startup_message(self) -> None:
        """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        if self.bot and bot_config.admin_id:
            success = await send_test_message(
                self.bot,
                bot_config.admin_id,
                "ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
            )

            if success:
                logging.info("Startup message sent to admin")
            else:
                logging.error("Failed to send startup message")

    async def start_polling(self) -> None:
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞."""
        if not self.bot or not self.dp:
            raise RuntimeError("Bot not properly initialized")

        self._running = True
        logging.info("Starting bot polling...")

        await self.send_startup_message()

        try:
            await self.dp.start_polling(
                self.bot,
                allowed_updates=["message"]
            )
        except Exception as e:
            logging.error(f"Polling error: {e}")
            raise
        finally:
            self._running = False

    async def stop(self) -> None:
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞."""
        if self.bot and self._running:
            await self.bot.session.close()
            self._running = False
            logging.info("Bot stopped")

    def is_running(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ."""
        return self._running


# Global bot instance
telegram_bot = TelegramBot()


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è –±–æ—Ç–∞."""
    try:
        telegram_bot.setup()
        await telegram_bot.start_polling()
    except KeyboardInterrupt:
        logging.info("Bot interrupted by user")
    except Exception as e:
        logging.error(f"Bot error: {e}")
    finally:
        await telegram_bot.stop()


if __name__ == "__main__":
    asyncio.run(main())