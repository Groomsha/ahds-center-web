"""–î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞."""

import logging
from typing import Dict, Any

# Built-in imports

# Third-party imports
from aiogram import Bot
from aiogram.types import Message

# Project imports


def setup_logging() -> None:
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –±–æ—Ç–∞."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )


def get_user_info(message: Message) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
    user = message.from_user
    if not user:
        return {}

    return {
        'user_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'language_code': user.language_code
    }


async def send_test_message(bot: Bot, chat_id: int, message: str = "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! üöÄ") -> bool:
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –≤–∫–∞–∑–∞–Ω–æ–≥–æ —á–∞—Ç—É."""
    try:
        await bot.send_message(chat_id=chat_id, text=message)
        return True
    except Exception as e:
        logging.error(f"Failed to send test message: {e}")
        return False


def format_uptime(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –≤ –∑—Ä—É—á–Ω–∏–π –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç."""
    hours, remainder = divmod(seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    return f"{hours}–≥ {minutes}—Ö–≤ {seconds}—Å"